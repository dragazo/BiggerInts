#include <iostream>
#include <iomanip>
#include <type_traits>
#include <limits>
#include <chrono>
#include <string>
#include <sstream>
#include <utility>
#include <cassert>

#include "BiggerInts.h"

#define COMMA ,

#define assert_throws(except, expr) try { expr; std::cerr << "didn't throw\n"; assert(false); } catch (const except&) {} catch (...) { std::cerr << "threw wrong type\n"; assert(false); }

#define test_fail(expr, expected, name) { std::cerr << "Failed Test: " << (name) << " " expr " -> " << res << " != " << (expected) << '\n'; }
#define test(expr, expected, name) { auto res = (expr); if(res != (expected)) test_fail(expr, expected, name); }

#define t_start auto _t = std::chrono::high_resolution_clock::now();
#define t_end auto _dt = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now() - _t).count();
#define t_print(expr, count) { std::cout << #expr " -> " << (expr) << " : " << _dt << "ms\n"; }

#define t_test(init, expr, count) { init; t_start; for(int i = 0; i < count; ++i) (expr); t_end; t_print(expr, count); }

template<typename ...Args>
std::string tostr(const Args &...args)
{
	std::ostringstream ostr;
	(ostr << ... << args);
	return ostr.str();
}

int main(int argc, const char *argv[])
{
	using namespace BiggerInts;

	assert(detail::highest_set_bit(0) == 0);
	for (std::size_t i = 0; i < 64; ++i)
	{
		assert(detail::highest_set_bit((std::uint64_t)1 << i) == i);
	}
	assert(detail::highest_set_bit(uint_t<512>(0)) == 0);

	assert(tostr(uint_t<128>(2) * uint_t<128>(13)) == "26");
	assert(tostr(uint_t<128>(2) + uint_t<128>(13)) == "15");
	assert(tostr(uint_t<128>(2) / uint_t<128>(13)) == "0");
	assert(tostr(uint_t<128>(2) % uint_t<128>(13)) == "2");

	assert(tostr(uint_t<128>(52) * uint_t<128>(3)) == "156");
	assert(tostr(uint_t<128>(52) + uint_t<128>(3)) == "55");
	assert(tostr(uint_t<128>(52) / uint_t<128>(3)) == "17");
	assert(tostr(uint_t<128>(52) % uint_t<128>(3)) == "1");

	assert(tostr(int_t<128>(2) * int_t<128>(-13)) == "-26");
	assert(tostr(int_t<128>(2) + int_t<128>(-13)) == "-11");
	assert(tostr(int_t<128>(2) / int_t<128>(-13)) == "0");
	assert(tostr(int_t<128>(2) % int_t<128>(13)) == "2");

	assert(tostr(int_t<128>(2) & int_t<128>(-13)) == "2");
	assert(tostr(int_t<128>(2) | int_t<128>(-13)) == "-13");
	assert(tostr(int_t<128>(2) ^ int_t<128>(-13)) == "-15");

	assert(tostr(int_t<128>(-13) << 1) == "-26");
	assert(tostr(int_t<128>(-13) << 2) == "-52");

	assert(tostr(int_t<128>(-13) >> 1) == "-7");
	assert(tostr(int_t<128>(-13) >> 2) == "-4");

	uint_t<8192> big_mul = 947563412;
	assert(tostr(big_mul) == "947563412");
	
	big_mul *= big_mul;
	assert(tostr(big_mul) == "897876419761081744");

	big_mul *= big_mul;
	assert(tostr(big_mul) == "806182065162978263317234893050081536");

	big_mul *= big_mul;
	assert(tostr(big_mul) == "649929522190444530768966266652239714986927778859800606430979456248119296");

	big_mul += 17;
	assert(tostr(big_mul) == "649929522190444530768966266652239714986927778859800606430979456248119313");

	big_mul <<= 621;
	assert(tostr(big_mul) == "56557938587827109863786197009098171333880971620065133028223237982646344014826583116417132"
		"577306321974342507460953540245890763571403111747364084775326663465806403623083715574"
		"23307676007538288423649789830139543353463939819407429243267044228077146543261877272576");

	big_mul &= big_mul;
	assert(tostr(big_mul) == "56557938587827109863786197009098171333880971620065133028223237982646344014826583116417132"
		"577306321974342507460953540245890763571403111747364084775326663465806403623083715574"
		"23307676007538288423649789830139543353463939819407429243267044228077146543261877272576");

	big_mul |= big_mul;
	assert(tostr(big_mul) == "56557938587827109863786197009098171333880971620065133028223237982646344014826583116417132"
		"577306321974342507460953540245890763571403111747364084775326663465806403623083715574"
		"23307676007538288423649789830139543353463939819407429243267044228077146543261877272576");

	auto post_dec = big_mul--;
	assert(tostr(post_dec) == "56557938587827109863786197009098171333880971620065133028223237982646344014826583116417132"
		"577306321974342507460953540245890763571403111747364084775326663465806403623083715574"
		"23307676007538288423649789830139543353463939819407429243267044228077146543261877272576");
	assert(tostr(big_mul) == "56557938587827109863786197009098171333880971620065133028223237982646344014826583116417132"
		"577306321974342507460953540245890763571403111747364084775326663465806403623083715574"
		"23307676007538288423649789830139543353463939819407429243267044228077146543261877272575");

	auto post_inc = big_mul++;
	assert(tostr(post_inc) == "56557938587827109863786197009098171333880971620065133028223237982646344014826583116417132"
		"577306321974342507460953540245890763571403111747364084775326663465806403623083715574"
		"23307676007538288423649789830139543353463939819407429243267044228077146543261877272575");
	assert(tostr(big_mul) == "56557938587827109863786197009098171333880971620065133028223237982646344014826583116417132"
		"577306321974342507460953540245890763571403111747364084775326663465806403623083715574"
		"23307676007538288423649789830139543353463939819407429243267044228077146543261877272576");

	auto pre_inc = ++big_mul;
	assert(tostr(pre_inc) == "56557938587827109863786197009098171333880971620065133028223237982646344014826583116417132"
		"577306321974342507460953540245890763571403111747364084775326663465806403623083715574"
		"23307676007538288423649789830139543353463939819407429243267044228077146543261877272577");
	assert(tostr(big_mul) == "56557938587827109863786197009098171333880971620065133028223237982646344014826583116417132"
		"577306321974342507460953540245890763571403111747364084775326663465806403623083715574"
		"23307676007538288423649789830139543353463939819407429243267044228077146543261877272577");
	assert(pre_inc == big_mul);
	assert(pre_inc <= big_mul);
	assert(pre_inc >= big_mul);

	auto pre_dec = --big_mul;
	assert(tostr(pre_dec) == "56557938587827109863786197009098171333880971620065133028223237982646344014826583116417132"
		"577306321974342507460953540245890763571403111747364084775326663465806403623083715574"
		"23307676007538288423649789830139543353463939819407429243267044228077146543261877272576");
	assert(tostr(big_mul) == "56557938587827109863786197009098171333880971620065133028223237982646344014826583116417132"
		"577306321974342507460953540245890763571403111747364084775326663465806403623083715574"
		"23307676007538288423649789830139543353463939819407429243267044228077146543261877272576");
	assert(pre_dec == big_mul);
	assert(pre_dec <= big_mul);
	assert(pre_dec >= big_mul);

	big_mul >>= 191;
	assert(tostr(big_mul) == "1802039889491867190810467664715451904918476332004551151301726717494487639814495660570778575783656"
		"106649698951732305310318830222989557694740573768908873663803263415298739647066704572678996885278044454912");
	big_mul <<= 73;
	assert(tostr(big_mul) == "1701978554986102599652944396520696900597046164730926970313320209887640881966509866088480298291994"
		"7794655263581165454491067120838946815593625140970325732225722954705464939198103933056536439508186725987781864851905868153749504");

	big_mul += big_mul;
	assert(tostr(big_mul) == "34039571099722051993058887930413938011940923294618539406266404197752817639330197321769605965839895589"
		"310527162330908982134241677893631187250281940651464451445909410929878396207866113072879016373451975563729703811736307499008");

	big_mul <<= 1;
	assert(tostr(big_mul) == "68079142199444103986117775860827876023881846589237078812532808395505635278660394643539211931679791178"
		"621054324661817964268483355787262374500563881302928902891818821859756792415732226145758032746903951127459407623472614998016");

	big_mul = 465;
	assert(tostr(big_mul) == "465");

	assert(tostr(big_mul + 75u) == "540");
	assert(tostr(big_mul ^ big_mul) == "0");

	// -- type equivalence tests -- //

	static_assert(std::is_same<uint_t<8>, std::uint8_t>::value, "type equivalence violation");
	static_assert(std::is_same<uint_t<16>, std::uint16_t>::value, "type equivalence violation");
	static_assert(std::is_same<uint_t<32>, std::uint32_t>::value, "type equivalence violation");
	static_assert(std::is_same<uint_t<64>, std::uint64_t>::value, "type equivalence violation");

	static_assert(std::is_same<int_t<8>, std::int8_t>::value, "type equivalence violation");
	static_assert(std::is_same<int_t<16>, std::int16_t>::value, "type equivalence violation");
	static_assert(std::is_same<int_t<32>, std::int32_t>::value, "type equivalence violation");
	static_assert(std::is_same<int_t<64>, std::int64_t>::value, "type equivalence violation");

	// -- numeric limits tests -- //

	assert(tostr(std::numeric_limits<uint_t<512>>::min()) == "0");
	assert(tostr(std::numeric_limits<uint_t<512>>::max()) == "13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095");
	assert(tostr(std::numeric_limits<uint_t<512>>::lowest()) == "0");

	assert(tostr(std::numeric_limits<int_t<512>>::min()) == "-6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042048");
	assert(tostr(std::numeric_limits<int_t<512>>::max()) == "6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042047");
	assert(tostr(std::numeric_limits<int_t<512>>::lowest()) == "-6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042048");

	assert(tostr(std::numeric_limits<uint_t<128>>::min()) == "0");
	assert(tostr(std::numeric_limits<uint_t<128>>::max()) == "340282366920938463463374607431768211455");
	assert(tostr(std::numeric_limits<uint_t<128>>::lowest()) == "0");

	assert(tostr(std::numeric_limits<int_t<128>>::min()) == "-170141183460469231731687303715884105728");
	assert(tostr(std::numeric_limits<int_t<128>>::max()) == "170141183460469231731687303715884105727");
	assert(tostr(std::numeric_limits<int_t<128>>::lowest()) == "-170141183460469231731687303715884105728");

	assert(tostr(std::numeric_limits<uint_t<64>>::min()) == "0");
	assert(tostr(std::numeric_limits<uint_t<64>>::max()) == "18446744073709551615");
	assert(tostr(std::numeric_limits<uint_t<64>>::lowest()) == "0");

	assert(tostr(std::numeric_limits<int_t<64>>::min()) == "-9223372036854775808");
	assert(tostr(std::numeric_limits<int_t<64>>::max()) == "9223372036854775807");
	assert(tostr(std::numeric_limits<int_t<64>>::lowest()) == "-9223372036854775808");

	// -- test string parsing -- //

	assert(tostr(uint_t<256>::parse("184738578493786576848368767654873647697975746763857664")) == "184738578493786576848368767654873647697975746763857664");
	assert(tostr(uint_t<256>::parse("18")) == "18");
	assert(uint_t<256>::parse("18") == 18u);

	assert(tostr(int_t<256>::parse("184738578493786576848368767654873647697975746763857664")) == "184738578493786576848368767654873647697975746763857664");
	assert(tostr(int_t<256>::parse("18")) == "18");
	assert(int_t<256>::parse("18") == 18);
	assert(int_t<256>::parse("+18") == 18);

	assert(tostr(int_t<256>::parse("-184738578493786576848368767654873647697975746763857664")) == "-184738578493786576848368767654873647697975746763857664");
	assert(tostr(int_t<256>::parse("-18")) == "-18");
	assert(int_t<256>::parse("-18") == -18);

	assert(tostr(int_t<256>::parse(" -18")) == "-18");
	assert(tostr(int_t<256>::parse("-18 ")) == "-18");
	assert(tostr(int_t<256>::parse(" -18 ")) == "-18");
	assert(int_t<256>::parse("-18") == -18);
	assert(int_t<256>::parse("-18 ") == -18);
	assert(int_t<256>::parse(" -18") == -18);

	assert_throws(std::invalid_argument, uint_t<512>::parse("- 18"));
	assert_throws(std::invalid_argument, uint_t<512>::parse("+ 18"));

	assert_throws(std::invalid_argument, uint_t<512>::parse("abc"));
	assert_throws(std::invalid_argument, uint_t<512>::parse(" abc"));
	assert_throws(std::invalid_argument, uint_t<512>::parse("abc "));
	assert_throws(std::invalid_argument, uint_t<512>::parse(" abc "));

	assert_throws(std::invalid_argument, uint_t<512>::parse("a18"));
	assert_throws(std::invalid_argument, uint_t<512>::parse("18a"));

	assert_throws(std::invalid_argument, uint_t<512>::parse("a 18"));
	assert_throws(std::invalid_argument, uint_t<512>::parse("18 a"));

	// ----------

	assert_throws(std::invalid_argument, int_t<512>::parse("- 18"));
	assert_throws(std::invalid_argument, int_t<512>::parse("+ 18"));

	assert_throws(std::invalid_argument, int_t<512>::parse("abc"));
	assert_throws(std::invalid_argument, int_t<512>::parse(" abc"));
	assert_throws(std::invalid_argument, int_t<512>::parse("abc "));
	assert_throws(std::invalid_argument, int_t<512>::parse(" abc "));

	assert_throws(std::invalid_argument, int_t<512>::parse("a18"));
	assert_throws(std::invalid_argument, int_t<512>::parse("18a"));

	assert_throws(std::invalid_argument, int_t<512>::parse("a 18"));
	assert_throws(std::invalid_argument, int_t<512>::parse("18 a"));

	// base parsing tests

	assert_throws(std::invalid_argument, uint_t<256>::parse("0x764"));
	assert_throws(std::invalid_argument, uint_t<256>::parse("0x764", 10));
	assert_throws(std::invalid_argument, uint_t<256>::parse("0x764", 8));
	assert_throws(std::invalid_argument, uint_t<256>::parse("0x764", 16));
	assert(tostr(uint_t<256>::parse("0x764", 0)) == "1892");
	assert(tostr(uint_t<256>::parse("0764", 0)) == "500");
	assert(tostr(uint_t<256>::parse("764", 0)) == "764");

	assert(tostr(uint_t<256>::parse("167345562314657356422211643535261643535621", 10)) == "167345562314657356422211643535261643535621");
	assert(tostr(uint_t<256>::parse("167345562314657356422211643535261643535621", 8)) == "19846815955032434075951735996930767761");
	assert(tostr(uint_t<256>::parse("167345562314657356422211643535261643535621", 16)) == "32811116214936888653588305588611479218962394469921");

	assert(tostr(int_t<256>::parse("167345562314657356422211643535261643535621", 10)) == "167345562314657356422211643535261643535621");
	assert(tostr(int_t<256>::parse("167345562314657356422211643535261643535621", 8)) == "19846815955032434075951735996930767761");
	assert(tostr(int_t<256>::parse("167345562314657356422211643535261643535621", 16)) == "32811116214936888653588305588611479218962394469921");

	assert(tostr(int_t<256>::parse("+167345562314657356422211643535261643535621", 10)) == "167345562314657356422211643535261643535621");
	assert(tostr(int_t<256>::parse("+167345562314657356422211643535261643535621", 8)) == "19846815955032434075951735996930767761");
	assert(tostr(int_t<256>::parse("+167345562314657356422211643535261643535621", 16)) == "32811116214936888653588305588611479218962394469921");

	assert(tostr(int_t<256>::parse("-167345562314657356422211643535261643535621", 10)) == "-167345562314657356422211643535261643535621");
	assert(tostr(int_t<256>::parse("-167345562314657356422211643535261643535621", 8)) == "-19846815955032434075951735996930767761");
	assert(tostr(int_t<256>::parse("-167345562314657356422211643535261643535621", 16)) == "-32811116214936888653588305588611479218962394469921");

	{
		uint_t<256> temp;

		assert(!uint_t<256>::try_parse(temp, "0x764"));
		assert(!uint_t<256>::try_parse(temp, "0x764", 10));
		assert(!uint_t<256>::try_parse(temp, "0x764", 8));
		assert(!uint_t<256>::try_parse(temp, "0x764", 16));
		assert(uint_t<256>::try_parse(temp, "0x764", 0));
	}

	{
		int_t<256> temp;
		assert(int_t<256>::try_parse(temp, "-167345562314657356422211643535261643535621", 10));
		assert(tostr(temp) == "-167345562314657356422211643535261643535621");

		assert(int_t<256>::try_parse(temp, "-167345562314657356422211643535261643535621", 8));
		assert(tostr(temp) == "-19846815955032434075951735996930767761");

		assert(int_t<256>::try_parse(temp, "-167345562314657356422211643535261643535621", 16));
		assert(tostr(temp) == "-32811116214936888653588305588611479218962394469921");
	}

	{
		uint_t<512> u;

		u = uint_t<512>::parse("67039039649712985497870124991029230637396829102961966888617807218608820150367734884009371490834517138450159290932430254268769414059732849732168245030420");
		assert(tostr(u) == "67039039649712985497870124991029230637396829102961966888617807218608820150367734884009371490834517138450159290932430254268769414059732849732168245030420");
		u *= 100ull;
		assert(tostr(u) == "6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042000");
		u += 48ull;
		assert(tostr(u) == "6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042048");
	}

	// overflow parsing tests

	{
		uint_t<512> u;
		int_t<512> s;

		assert(tostr(uint_t<512>::parse("13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095")) == "13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095");
		assert(tostr(int_t<512>::parse("-6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042048")) == "-6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042048");
		assert(tostr(int_t<512>::parse("6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042047")) == "6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042047");

		assert_throws(std::invalid_argument, uint_t<512>::parse("13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096"));
		assert_throws(std::invalid_argument, int_t<512>::parse("-6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042049"));
		assert_throws(std::invalid_argument, int_t<512>::parse("6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042048"));

		assert(uint_t<512>::try_parse(u, "13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095"));
		assert(int_t<512>::try_parse(s, "-6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042048"));
		assert(int_t<512>::try_parse(s, "6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042047"));

		assert(!uint_t<512>::try_parse(u, "13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096"));
		assert(!int_t<512>::try_parse(s, "-6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042049"));
		assert(!int_t<512>::try_parse(s, "6703903964971298549787012499102923063739682910296196688861780721860882015036773488400937149083451713845015929093243025426876941405973284973216824503042048"));
	}

	// -- all tests completed -- //

	std::cerr << "\n\nall tests completed successfully\n";
	return 0;
}
